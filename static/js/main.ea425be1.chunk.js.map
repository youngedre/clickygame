{"version":3,"sources":["components/Jumbotron/index.js","components/Score/index.js","components/Message/index.js","components/Navbar/index.js","components/Card/index.js","components/Container/index.js","components/Row/index.js","components/Column/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","className","Score","name","score","topScore","Message","message","Navbar","href","this","Component","Card","id","src","image","alt","onClick","handleCardClick","Container","children","Row","Column","App","resetGame","setState","clicked","randomizeCards","loseGame","winGame","cardArray","state","cards","i","length","randomNum","Math","floor","random","event","cardId","target","includes","push","map","card","bind","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea425be1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Jumbotron = props => {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4 text-center font-weight-bold\">Hero Clicky Game!</h1>\n          <p className=\"lead text-center\">Click on an image to earn points, but don't click on any more than once!</p>\n        </div>\n      </div>\n    );\n}\nexport default Jumbotron;","import React from \"react\";\n\nfunction Score(props) {\n\n    return(\n        <li className=\"nav-item text-light score\" \n                name=\"score topScore\">\n                    Score: {props.score} | Top Score: {props.topScore}\n        </li>\n    );\n}\n\nexport default Score;","import React from \"react\";\n\nfunction Message(props) {\n\n    return  (\n\n        <li className=\"nav-item text-light center-align\" name=\"message\">{props.message}</li>\n    )\n}\n\nexport default Message;","import React, { Component } from \"react\";\nimport Score from \"../Score\";\nimport Message from \"../Message\"\nimport \"./style.css\";\n\nclass Navbar extends Component {\n\n    render() {\n\n        return (\n            <nav className=\"navbar navbar-expand-lg\">\n                <ul className=\"navbar-nav ul-auto\">\n                    <li className=\"navbar-brand\">\n                        <a href=\"/\">Hero Clicky Game</a>\n                    </li>\n                    <Message\n                        message={this.props.message}/>\n                    <Score \n                        score={this.props.score}\n                        topScore={this.props.topScore}/>\n                </ul>            \n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\n\nclass Card extends Component {\n\n    componentDidMount() {\n        this.id = this.props.id;\n    }\n    \n    render() {\n        return (\n            <div className=\"hero\">\n                <img\n                    className=\"clicked\"\n                    src={this.props.image}\n                    alt=\"character\"\n                    id={this.props.id}\n                    onClick={this.props.handleCardClick}\n                    />\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from \"react\";\n\nfunction Container({ children }) {\n    return (\n        <div className=\"container\">\n            {children}\n        </div>\n    );\n}\n\nexport default Container;","import React from \"react\";\n\nfunction Row({ children }) {\n    \n    return (\n        <div className=\"row\">\n            {children}\n        </div>\n    );\n}\n\nexport default Row;","import React from \"react\";\n\nfunction Column({children}) {\n    return(\n        <div className=\"col-md\">\n            {children}\n        </div>\n    );\n}\n\nexport default Column;","import React, { Component } from 'react';\nimport Jumbotron from \"./components/Jumbotron\";\nimport Navbar from \"./components/Navbar\";\nimport Card from \"./components/Card\";\nimport Container from \"./components/Container\";\nimport Row from \"./components/Row\";\nimport Column from \"./components/Column\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      topScore: 0,\n      cards: cards,\n      clicked: [],\n      message: \"Click a card to begin!\"\n    };\n  }\n\n  // Randomize the cards before the component mounts\n  componentWillMount() {\n    this.randomizeCards();\n  }\n\n  // Function to reset the game state\n  resetGame = () => {\n      this.setState({\n          score: 0,\n          clicked: [],\n          message: \"Click a card to begin!\"\n      });\n      this.randomizeCards();\n  }\n\n  // Function for if the user loses the game\n  loseGame = () => {\n      this.setState({\n        message: \"GAME OVER!\"\n      });\n  }\n\n  // function for if the user wins the game\n  winGame = () => {\n      this.setState({\n        message: \"YOU WIN!\"\n      });\n  }\n\n  // After a card is clicked, shuffle the cards\n  randomizeCards = () => {\n      let cardArray = this.state.cards;\n      for (let i = cardArray.length - 1; i > 0; i--) {\n          let randomNum = Math.floor(Math.random() * (i + 1));\n          [cardArray[i], cardArray[randomNum]] = [cardArray[randomNum], cardArray[i]];\n      }\n      this.setState({\n          cards: cardArray\n      });\n  }\n\n  // Function to handle the click events\n  handleCardClick = event => {\n      let cardId = event.target.id;\n      if (this.state.clicked.includes(cardId)) {\n          this.loseGame();\n          this.setState({\n            clicked: [],\n            score: 0\n          });\n      } else {\n          this.state.clicked.push(cardId);\n          let score = this.state.score + 1;\n          let topScore = score > this.state.topScore ? score : this.state.topScore;\n          this.setState({\n              score,\n              topScore,\n              message: \"Good choice!\"\n          });\n          if (this.state.clicked.length === 12) {\n              this.winGame();\n              this.setState({\n                clicked: [],\n                score: 0\n              });\n          }\n          this.randomizeCards();\n      }\n  }\n    render() {\n      return(\n        <main>\n        <Navbar \n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        <Jumbotron />\n        <Container>\n          <Row>\n            <Column>\n              {this.state.cards.map((card, i)  => {\n                return(\n                  <Card\n                      handleCardClick={this.handleCardClick.bind(this)}\n                      id={card.id}\n                      key={card.id}\n                      image={card.image}\n                      clicked={card.clicked}\n                  />\n                )})}\n            </Column>\n          </Row>\n        </Container>\n      </main>\n      );\n    }\n  }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}